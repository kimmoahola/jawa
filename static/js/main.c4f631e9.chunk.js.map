{"version":3,"sources":["config.js","utils.js","api.js","components/Temperature.js","components/TempTsPair.js","components/Timestamp.js","components/Observation.js","components/Forecast.js","components/Weather.js","components/DataLayer.js","App.js","serviceWorker.js","index.js"],"names":["FORECAST_REFRESH_INTERVAL","OBSERVATION_REFRESH_INTERVAL","INTERESTING_HOURS","xmlToJson","xml","obj","nodeType","attributes","length","j","attribute","item","nodeName","nodeValue","hasChildNodes","childNodes","i","push","old","getInterestingTimestamps","forecast","result","index","element","indexOf","getHours","key","getUnixTime","startOfDay","e","items","ts","temp","Object","keys","map","sort","first","second","a","fromUnixTime","fetchXml","url","fetch","DOMParser","text","parseFromString","fetchForecast","place","endTime","endOfDay","addHours","Date","now","toISOString","json","Number","fetchObservation","startTime","setTime","getTime","observation","Temperature","className","Math","round","TempTsPair","includeMinutes","getMinutes","Timestamp","format","isToday","isTomorrow","Observation","data","Forecast","d","index1","Array","index2","Weather","observationData","forecastData","DATA_CHECK_INTERVAL","DataLayer","useState","undefined","setForecastData","setObservationData","mark","setMark","useEffect","timer","setTimeout","m","clearTimeout","fetchData","PLACE","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c4f631e9.chunk.js","sourcesContent":["export const FORECAST_REFRESH_INTERVAL = 60 * 60 * 1000;\nexport const OBSERVATION_REFRESH_INTERVAL = 20 * 60 * 1000;\nexport const INTERESTING_HOURS = [8, 16, 19, 23];\n","// https://gist.github.com/demircancelebi/f0a9c7e1f48be4ea91ca7ad81134459d\nexport function xmlToJson(xml) {\n  // Create the return object\n  let obj = {};\n\n  if (xml.nodeType === 1) {\n    // element\n    // do attributes\n    if (xml.attributes.length > 0) {\n      obj[\"@attributes\"] = {};\n      for (let j = 0; j < xml.attributes.length; j += 1) {\n        const attribute = xml.attributes.item(j);\n        obj[\"@attributes\"][attribute.nodeName] = attribute.nodeValue;\n      }\n    }\n  } else if (xml.nodeType === 3) {\n    // text\n    obj = xml.nodeValue;\n  }\n\n  // do children\n  // If just one text node inside\n  if (\n    xml.hasChildNodes() &&\n    xml.childNodes.length === 1 &&\n    xml.childNodes[0].nodeType === 3\n  ) {\n    obj = xml.childNodes[0].nodeValue;\n  } else if (xml.hasChildNodes()) {\n    for (let i = 0; i < xml.childNodes.length; i += 1) {\n      const item = xml.childNodes.item(i);\n      const nodeName = item.nodeName;\n      if (typeof obj[nodeName] === \"undefined\") {\n        obj[nodeName] = xmlToJson(item);\n      } else {\n        if (typeof obj[nodeName].push === \"undefined\") {\n          const old = obj[nodeName];\n          obj[nodeName] = [];\n          obj[nodeName].push(old);\n        }\n        obj[nodeName].push(xmlToJson(item));\n      }\n    }\n  }\n  return obj;\n}\n","import { INTERESTING_HOURS } from \"./config\";\nimport { xmlToJson } from \"./utils\";\nimport {\n  startOfDay,\n  getUnixTime,\n  fromUnixTime,\n  endOfDay,\n  addHours\n} from \"date-fns\";\n\nconst getInterestingTimestamps = ({ forecast }) => {\n  const result = {\n    // Date: {\n    //   items: [\n    //     {\n    //       ts: Date,\n    //       temp: Number,\n    //     }\n    //   ]\n    // }\n  };\n\n  for (let index = 0; index < forecast.length; index++) {\n    const element = forecast[index];\n    if (INTERESTING_HOURS.indexOf(element[\"ts\"].getHours()) !== -1) {\n      const key = getUnixTime(startOfDay(element[\"ts\"]));\n      const e = (key in result && result[key]) || (result[key] = { items: [] });\n\n      e[\"items\"] || (e[\"items\"] = []);\n      e[\"items\"].push({\n        ts: element[\"ts\"],\n        temp: element[\"temp\"]\n      });\n    }\n  }\n\n  // Create items array\n  var items = Object.keys(result).map(function(key) {\n    return [key, result[key]];\n  });\n\n  // Sort the array based on the second element\n  items.sort(function(first, second) {\n    return first[0] - second[0];\n  });\n\n  // [\n  //   {\n  //     startOfDay: Date,\n  //     items: [\n  //       ts: Date,\n  //       temp: Number\n  //     ]\n  //   }\n  // ]\n  return items.map(a => ({\n    startOfDay: fromUnixTime(a[0]),\n    items: a[1].items\n  }));\n};\n\nasync function fetchXml({ url }) {\n  const result = await fetch(url);\n  return xmlToJson(\n    new DOMParser().parseFromString(await result.text(), \"text/xml\")\n  );\n}\n\nexport async function fetchForecast({ place }) {\n  const endTime = endOfDay(addHours(Date.now(), 48));\n\n  const json = await fetchXml({\n    url: `https://opendata.fmi.fi/wfs?request=getFeature&storedquery_id=fmi::forecast::harmonie::surface::point::simple&place=${place}&parameters=temperature&endtime=${endTime.toISOString()}`\n  });\n\n  return json[\"wfs:FeatureCollection\"] &&\n    json[\"wfs:FeatureCollection\"][\"wfs:member\"]\n    ? {\n        ts: new Date(json[\"wfs:FeatureCollection\"][\"@attributes\"][\"timeStamp\"]),\n        forecast: getInterestingTimestamps({\n          forecast: json[\"wfs:FeatureCollection\"][\"wfs:member\"].map(e => ({\n            ts: new Date(e[\"BsWfs:BsWfsElement\"][\"BsWfs:Time\"]),\n            temp: Number(e[\"BsWfs:BsWfsElement\"][\"BsWfs:ParameterValue\"])\n          }))\n        })\n      }\n    : {};\n}\n\nexport async function fetchObservation({ place }) {\n  const startTime = new Date(Date.now());\n  startTime.setTime(startTime.getTime() - 60 * 60 * 1000);\n\n  const json = await fetchXml({\n    url: `https://opendata.fmi.fi/wfs?request=getFeature&storedquery_id=fmi::observations::weather::simple&place=${place}&parameters=temperature&starttime=${startTime.toISOString()}`\n  });\n\n  return json[\"wfs:FeatureCollection\"] &&\n    json[\"wfs:FeatureCollection\"][\"wfs:member\"]\n    ? {\n        ts: new Date(json[\"wfs:FeatureCollection\"][\"@attributes\"][\"timeStamp\"]),\n        observation: {\n          ts: new Date(\n            json[\"wfs:FeatureCollection\"][\"wfs:member\"][\n              json[\"wfs:FeatureCollection\"][\"wfs:member\"].length - 1\n            ][\"BsWfs:BsWfsElement\"][\"BsWfs:Time\"]\n          ),\n          temp: Number(\n            json[\"wfs:FeatureCollection\"][\"wfs:member\"][\n              json[\"wfs:FeatureCollection\"][\"wfs:member\"].length - 1\n            ][\"BsWfs:BsWfsElement\"][\"BsWfs:ParameterValue\"]\n          )\n        }\n      }\n    : {};\n}\n","import React from \"react\";\n\nexport function Temperature({ temp }) {\n  return (\n    <span className=\"temperature\">\n      <span className=\"temperature-number\">{Math.round(temp)}</span>\n      <span className=\"temperature-degree\">°C</span>\n    </span>\n  );\n}\n","import React from \"react\";\nimport { Temperature } from \"./Temperature\";\n\nexport function TempTsPair(\n  { ts, temp, includeMinutes } = { includeMinutes: false }\n) {\n  return (\n    <div>\n      <span className=\"time\">\n        klo {ts.getHours()}\n        {includeMinutes ? \":\" + ts.getMinutes() : \"\"}{\" \"}\n      </span>\n      <Temperature temp={Math.round(temp)}></Temperature>\n    </div>\n  );\n}\n","import React from \"react\";\nimport { isToday, isTomorrow, format } from \"date-fns\";\n\nexport function Timestamp({ ts }) {\n  // console.log(typeof ts);\n\n  return (\n    <>\n      {/* {ts.toLocaleString(\"fi-FI\")} - */}\n      {format(ts, \"EEEE - \")}\n      {isToday(ts)\n        ? \"Tänään\"\n        : isTomorrow(ts)\n        ? \"Huomenna\"\n        : format(ts, \"d.MM.\")}\n    </>\n  );\n}\n","import React from \"react\";\nimport { TempTsPair } from \"./TempTsPair\";\nimport { LastUpdated } from \"./LastUpdated\";\nimport { Timestamp } from \"./Timestamp\";\n\nexport function Observation({ data }) {\n  return (\n    <div>\n      {data ? (\n        <>\n          <div className=\"forecast-date\">Nyt</div>\n\n          <div className=\"weather-item\">\n            <TempTsPair\n              ts={data[\"observation\"][\"ts\"]}\n              temp={data[\"observation\"][\"temp\"]}\n              includeMinutes={true}\n            />\n          </div>\n          {/* <LastUpdated ts={data[\"ts\"]} /> */}\n        </>\n      ) : (\n        \"\"\n      )}\n    </div>\n  );\n}\n","import React from \"react\";\nimport { TempTsPair } from \"./TempTsPair\";\nimport { LastUpdated } from \"./LastUpdated\";\nimport { Timestamp } from \"./Timestamp\";\nimport { INTERESTING_HOURS } from \"../config\";\n\nexport function Forecast({ data }) {\n  return (\n    <div>\n      {data ? (\n        <>\n          <div>\n            {data[\"forecast\"].map((d, index1) => (\n              <div key={index1}>\n                <div className=\"forecast-date\">\n                  <Timestamp ts={d[\"startOfDay\"]} />\n                </div>\n                <div className=\"weather-container\">\n                  {[\n                    ...Array(\n                      INTERESTING_HOURS.length - d[\"items\"].length\n                    ).keys()\n                  ].map((i, index2) => (\n                    <div key={index2} className=\"weather-item weather-item-empty\"></div>\n                  ))}\n                  {d[\"items\"].map((i, index2) => (\n                    <div key={index2} className=\"weather-item\">\n                      <TempTsPair ts={i[\"ts\"]} temp={i[\"temp\"]} />\n                    </div>\n                  ))}\n                </div>\n              </div>\n            ))}\n          </div>\n          {/* <LastUpdated ts={data[\"ts\"]} /> */}\n        </>\n      ) : (\n        \"\"\n      )}\n    </div>\n  );\n}\n","import React from \"react\";\nimport { Observation } from \"./Observation\";\nimport { Forecast } from \"./Forecast\";\n\nexport function Weather({ place, observationData, forecastData }) {\n  return (\n    <div>\n      <h1>{place}</h1>\n      <div>\n        <Observation data={observationData} />\n        <Forecast data={forecastData} className=\"weather-item\" />\n      </div>\n    </div>\n  );\n}\n","import React, { useState, useEffect } from \"react\";\nimport { fetchForecast, fetchObservation } from \"../api\";\nimport {\n  FORECAST_REFRESH_INTERVAL,\n  OBSERVATION_REFRESH_INTERVAL\n} from \"../config\";\nimport { Weather } from \"./Weather\";\n\nconst DATA_CHECK_INTERVAL = 30 * 1000;\n\nexport function DataLayer({ place }) {\n  const [forecastData, setForecastData] = useState(undefined);\n  const [observationData, setObservationData] = useState(undefined);\n  const [mark, setMark] = useState(0);\n\n  useEffect(() => {\n    const timer = setTimeout(() => setMark(m => m + 1), DATA_CHECK_INTERVAL);\n    return () => clearTimeout(timer);\n  }, [mark]);\n\n  useEffect(() => {\n    async function fetchData() {\n      setForecastData(await fetchForecast({ place }));\n    }\n\n    if (\n      !forecastData ||\n      (forecastData &&\n        forecastData[\"ts\"] &&\n        Date.now() - forecastData[\"ts\"] > FORECAST_REFRESH_INTERVAL)\n    ) {\n      fetchData();\n    }\n  }, [mark, place, forecastData]);\n\n  useEffect(() => {\n    async function fetchData() {\n      setObservationData(await fetchObservation({ place }));\n    }\n\n    if (\n      !observationData ||\n      (observationData &&\n        observationData[\"ts\"] &&\n        Date.now() - observationData[\"ts\"] > OBSERVATION_REFRESH_INTERVAL)\n    ) {\n      fetchData();\n    }\n  }, [mark, place, observationData]);\n\n  return (\n    <Weather\n      place={place}\n      observationData={observationData}\n      forecastData={forecastData}\n    />\n  );\n}\n","import React from \"react\";\nimport \"./App.css\";\nimport { DataLayer } from \"./components/DataLayer\";\n\nconst PLACE = \"Tampere\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <DataLayer place={PLACE} />\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}