{"version":3,"sources":["utils.js","config.js","components/TempTsPair.js","components/Observation.js","components/Weather.js","App.js","serviceWorker.js","index.js"],"names":["xmlToJson","xml","obj","nodeType","attributes","length","j","attribute","item","nodeName","nodeValue","hasChildNodes","childNodes","i","push","old","FORECAST_REFRESH_INTERVAL","TempTsPair","ts","temp","toLocaleString","Observation","place","useState","undefined","data","setData","mark","setMark","useEffect","timer","setTimeout","m","clearTimeout","a","startTime","Date","now","setTime","getTime","fetch","toISOString","result","text","XmlNode","DOMParser","parseFromString","json","observation","Number","fetchData","getInterestingTimestamps","forecast","interestingHours","index","element","indexOf","getHours","Weather","endTime","map","e","key","LastUpdated","formatDistance","PLACE","App","className","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.1bbc756b.chunk.js","sourcesContent":["// https://gist.github.com/demircancelebi/f0a9c7e1f48be4ea91ca7ad81134459d\nexport function xmlToJson(xml) {\n  // Create the return object\n  let obj = {};\n\n  if (xml.nodeType === 1) {\n    // element\n    // do attributes\n    if (xml.attributes.length > 0) {\n      obj[\"@attributes\"] = {};\n      for (let j = 0; j < xml.attributes.length; j += 1) {\n        const attribute = xml.attributes.item(j);\n        obj[\"@attributes\"][attribute.nodeName] = attribute.nodeValue;\n      }\n    }\n  } else if (xml.nodeType === 3) {\n    // text\n    obj = xml.nodeValue;\n  }\n\n  // do children\n  // If just one text node inside\n  if (\n    xml.hasChildNodes() &&\n    xml.childNodes.length === 1 &&\n    xml.childNodes[0].nodeType === 3\n  ) {\n    obj = xml.childNodes[0].nodeValue;\n  } else if (xml.hasChildNodes()) {\n    for (let i = 0; i < xml.childNodes.length; i += 1) {\n      const item = xml.childNodes.item(i);\n      const nodeName = item.nodeName;\n      if (typeof obj[nodeName] === \"undefined\") {\n        obj[nodeName] = xmlToJson(item);\n      } else {\n        if (typeof obj[nodeName].push === \"undefined\") {\n          const old = obj[nodeName];\n          obj[nodeName] = [];\n          obj[nodeName].push(old);\n        }\n        obj[nodeName].push(xmlToJson(item));\n      }\n    }\n  }\n  return obj;\n}\n","export const FORECAST_REFRESH_INTERVAL = 30 * 60 * 1000;\n","import React from \"react\";\n\nexport function TempTsPair({ ts, temp }) {\n  return (\n    <div>\n      {ts.toLocaleString(\"fi-FI\")}: {temp} Â°C\n    </div>\n  );\n}\n","import React, { useState, useEffect } from \"react\";\nimport { xmlToJson } from \"../utils\";\nimport { FORECAST_REFRESH_INTERVAL } from \"../config\";\nimport { TempTsPair } from \"./TempTsPair\";\n\nexport function Observation({ place }) {\n  const [data, setData] = useState(undefined);\n  const [mark, setMark] = useState(0);\n\n  useEffect(() => {\n    const timer = setTimeout(\n      () => setMark(m => m + 1),\n      FORECAST_REFRESH_INTERVAL\n    );\n    return () => clearTimeout(timer);\n  }, [mark]);\n\n  useEffect(() => {\n    async function fetchData() {\n      const startTime = new Date(Date.now());\n      startTime.setTime(startTime.getTime() - 60 * 60 * 1000);\n\n      const result = await fetch(\n        `https://opendata.fmi.fi/wfs?request=getFeature&storedquery_id=fmi::observations::weather::simple&place=${place}&parameters=temperature&starttime=${startTime.toISOString()}`\n      );\n      const data = await result.text();\n      const XmlNode = new DOMParser().parseFromString(data, \"text/xml\");\n      const json = xmlToJson(XmlNode);\n\n      setData(\n        json[\"wfs:FeatureCollection\"] &&\n          json[\"wfs:FeatureCollection\"][\"wfs:member\"]\n          ? {\n              ts: new Date(\n                json[\"wfs:FeatureCollection\"][\"@attributes\"][\"timeStamp\"]\n              ),\n              observation: {\n                ts: new Date(\n                  json[\"wfs:FeatureCollection\"][\"wfs:member\"][\n                    json[\"wfs:FeatureCollection\"][\"wfs:member\"].length - 1\n                  ][\"BsWfs:BsWfsElement\"][\"BsWfs:Time\"]\n                ),\n                temp: Number(\n                  json[\"wfs:FeatureCollection\"][\"wfs:member\"][\n                    json[\"wfs:FeatureCollection\"][\"wfs:member\"].length - 1\n                  ][\"BsWfs:BsWfsElement\"][\"BsWfs:ParameterValue\"]\n                )\n              }\n            }\n          : {}\n      );\n    }\n    fetchData();\n  }, [mark, place]);\n\n  return (\n    <div>\n      {data ? (\n        <>\n          <TempTsPair\n            ts={data[\"observation\"][\"ts\"]}\n            temp={data[\"observation\"][\"temp\"]}\n          />\n        </>\n      ) : (\n        \"\"\n      )}\n    </div>\n  );\n}\n","import React, { useState, useEffect } from \"react\";\nimport formatDistance from \"date-fns/formatDistance\";\nimport { Observation } from \"./Observation\";\nimport { xmlToJson } from \"../utils\";\nimport { FORECAST_REFRESH_INTERVAL } from \"../config\";\nimport { TempTsPair } from \"./TempTsPair\";\n\nconst getInterestingTimestamps = forecast => {\n  const interestingHours = [8, 16, 19];\n  const result = [];\n\n  for (let index = 0; index < forecast.length; index++) {\n    const element = forecast[index];\n    if (interestingHours.indexOf(element[\"ts\"].getHours()) !== -1) {\n      result.push(element);\n    }\n  }\n\n  return result;\n};\n\nfunction Weather({ place }) {\n  const [data, setData] = useState(undefined);\n  const [mark, setMark] = useState(0);\n\n  useEffect(() => {\n    const timer = setTimeout(\n      () => setMark(m => m + 1),\n      FORECAST_REFRESH_INTERVAL\n    );\n    return () => clearTimeout(timer);\n  }, [mark]);\n\n  useEffect(() => {\n    async function fetchData() {\n      const endTime = new Date(Date.now());\n      endTime.setTime(endTime.getTime() + 48 * 60 * 60 * 1000);\n\n      const result = await fetch(\n        `https://opendata.fmi.fi/wfs?request=getFeature&storedquery_id=fmi::forecast::harmonie::surface::point::simple&place=${place}&parameters=temperature&endtime=${endTime.toISOString()}`\n      );\n      const data = await result.text();\n      const XmlNode = new DOMParser().parseFromString(data, \"text/xml\");\n      const json = xmlToJson(XmlNode);\n\n      setData(\n        json[\"wfs:FeatureCollection\"] &&\n          json[\"wfs:FeatureCollection\"][\"wfs:member\"]\n          ? {\n              ts: new Date(\n                json[\"wfs:FeatureCollection\"][\"@attributes\"][\"timeStamp\"]\n              ),\n              forecast: getInterestingTimestamps(\n                json[\"wfs:FeatureCollection\"][\"wfs:member\"].map(e => ({\n                  ts: new Date(e[\"BsWfs:BsWfsElement\"][\"BsWfs:Time\"]),\n                  temp: Number(e[\"BsWfs:BsWfsElement\"][\"BsWfs:ParameterValue\"])\n                }))\n              )\n            }\n          : {}\n      );\n    }\n    fetchData();\n  }, [mark, place]);\n\n  return (\n    <div>\n      <p>Forecast of</p>\n      <h1>{place}</h1>\n      <div>\n        <Observation place={place} />\n        {data ? (\n          <>\n            <div>\n              {data[\"forecast\"].map((e, index) => (\n                <TempTsPair key={index} ts={e[\"ts\"]} temp={e[\"temp\"]} />\n              ))}\n            </div>\n            <LastUpdated ts={data[\"ts\"]} />\n          </>\n        ) : (\n          \"\"\n        )}\n      </div>\n    </div>\n  );\n}\n\nfunction LastUpdated({ ts }) {\n  const [mark, setMark] = useState(0);\n\n  useEffect(() => {\n    const timer = setTimeout(() => setMark(m => m + 1), 30 * 1000);\n    return () => clearTimeout(timer);\n  }, [mark]);\n\n  return <p>Last updated {formatDistance(new Date(), ts)} ago.</p>;\n}\n\nexport { Weather };\n","import React from \"react\";\nimport \"./App.css\";\nimport { Weather } from \"./components/Weather\";\n\nconst PLACE = \"Tampere\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <Weather place={PLACE} />\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}